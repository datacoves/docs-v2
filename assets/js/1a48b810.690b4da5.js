"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4032],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},87003:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"how-tos/dbt/compilation-errors","title":"Compilation Errors","description":"Compilation errors occur when dbt cannot successfully parse your Jinja templates or YAML files. These errors typically appear before any SQL is executed.","source":"@site/docs/how-tos/dbt/compilation-errors.md","sourceDirName":"how-tos/dbt","slug":"/how-tos/dbt/compilation-errors","permalink":"/docusaurus-test/docs/how-tos/dbt/compilation-errors","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":66,"frontMatter":{"title":"Compilation Errors","sidebar_position":66},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Debugging","permalink":"/docusaurus-test/docs/how-tos/dbt/advenced-dbt-debug"},"next":{"title":"Database Errors","permalink":"/docusaurus-test/docs/how-tos/dbt/database-errors"}}');var t=s(74848),r=s(28453);const o={title:"Compilation Errors",sidebar_position:66},l="How to Fix dbt Compilation Errors",a={},d=[{value:"Common Symptoms",id:"common-symptoms",level:2},{value:"Solution Steps",id:"solution-steps",level:2},{value:"Install dbt packages",id:"install-dbt-packages",level:3},{value:"Check Jinja Syntax",id:"check-jinja-syntax",level:3},{value:"Validate Model References",id:"validate-model-references",level:3},{value:"Review YAML Formatting",id:"review-yaml-formatting",level:3},{value:"Common Error Messages",id:"common-error-messages",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Model Attribute Debugging",id:"model-attribute-debugging",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-fix-dbt-compilation-errors",children:"How to Fix dbt Compilation Errors"})}),"\n",(0,t.jsx)(n.p,{children:"Compilation errors occur when dbt cannot successfully parse your Jinja templates or YAML files. These errors typically appear before any SQL is executed."}),"\n",(0,t.jsx)(n.h2,{id:"common-symptoms",children:"Common Symptoms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Missing dbt dependencies"}),"\n",(0,t.jsx)(n.li,{children:"Jinja syntax errors"}),"\n",(0,t.jsx)(n.li,{children:"Invalid macro references"}),"\n",(0,t.jsx)(n.li,{children:"Malformed YAML"}),"\n",(0,t.jsx)(n.li,{children:"Missing model references"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"solution-steps",children:"Solution Steps"}),"\n",(0,t.jsx)(n.h3,{id:"install-dbt-packages",children:"Install dbt packages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dbt deps\n"})}),"\n",(0,t.jsx)(n.h3,{id:"check-jinja-syntax",children:"Check Jinja Syntax"}),"\n",(0,t.jsx)(n.p,{children:"Review your Jinja code for common issues:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Verify bracket closure:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jinja",children:"{# Correct #}\n{{ ref('model_name') }}\n\n{# Incorrect, missing ) #}\n{{ ref('model_name' }}\n\n{# Incorrect, missing } #}\n{{ ref('model_name') }\n\n{# Incorrect, missing { and } #}\n{ ref('model_name') }\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Check macro syntax:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jinja",children:" {# Correct #}\n {% set my_var = 'value' %}\n \n {# Incorrect, missing } #}\n {% set my_var = 'value' %\n \n {# Incorrect, uses {{ }} instead of {% %} #}\n {{ set my_var = 'value' }}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validate-model-references",children:"Validate Model References"}),"\n",(0,t.jsx)(n.p,{children:"Ensure all referenced models and sources exist:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Check spelling of model names in ",(0,t.jsx)(n.code,{children:"ref()"})," functions"]}),"\n",(0,t.jsxs)(n.li,{children:["Check spelling of sources and tables in ",(0,t.jsx)(n.code,{children:"source()"})," functions"]}),"\n",(0,t.jsx)(n.li,{children:"Check name casing. It is a best practice to name everything in lower case to avoid issues."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"review-yaml-formatting",children:"Review YAML Formatting"}),"\n",(0,t.jsx)(n.p,{children:"YAML files must follow strict formatting rules:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check indentation:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  # Correct\n  version: 2\n\n  models:\n    - name: my_model\n      columns:\n        - name: id\n          data_tests:\n              - unique\n              - not_null\n              - accepted_values:\n                  values: ['placed', 'shipped', 'completed', 'returned']\n\n   # Incorrect indentation\n   models:\n   - name: my_model\n     columns:\n       - name: id\n         data_tests:\n           - unique\n         - not_null\n          - accepted_values:\n            values: ['placed', 'shipped', 'completed', 'returned']\n"})}),"\n",(0,t.jsxs)(n.p,{children:['A good way to think of indentation is "Is the property I am adding a sub-set of the prior item?". This is why the ',(0,t.jsx)(n.code,{children:"name:"})," of each model is indented below models."]}),"\n",(0,t.jsxs)(n.p,{children:["The same is true for columns and tests. Notice that ",(0,t.jsx)(n.code,{children:"values:"})," is indented below ",(0,t.jsx)(n.code,{children:"accepted_values:"})," because those are properties of that specific test."]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Verify list formatting"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When you have a list of items, they start with ",(0,t.jsx)(n.code,{children:"-"}),". That is why ",(0,t.jsx)(n.code,{children:"name"})," in both models and columns start with ",(0,t.jsx)(n.code,{children:"-"})," because each is a list of models or columns respectively. The same can be see in ",(0,t.jsx)(n.code,{children:"data_tests:"})," because there can be more than one test."]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Check for special character handling"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Check that you don't have strange characters in the yml file. This can happen if you copy/paste text from another source such as an MS Word file."}),"\n",(0,t.jsxs)(n.p,{children:["If you have a long description, you can also make it a multi line string using ",(0,t.jsx)(n.code,{children:">-"}),". Note: adding the ",(0,t.jsx)(n.code,{children:"-"})," is preferable because without it, the docs would compile with an extra new line at the end of the text block."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"  tables:\n    - name: us_population\n      description: >-\n        This source represents the raw data table containing information about the population of the\n        United States.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-error-messages",children:"Common Error Messages"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Message"}),(0,t.jsx)(n.th,{children:"Likely Cause"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Parsing Error"})}),(0,t.jsx)(n.td,{children:"Invalid YAML formatting issue"}),(0,t.jsx)(n.td,{children:"Check indentation and structure"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Compilation Error"})}),(0,t.jsx)(n.td,{children:"Invalid reference"}),(0,t.jsx)(n.td,{children:"Verify model exists and is spelled correctly"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Compilation Error unknown tag"})}),(0,t.jsx)(n.td,{children:"Jinja syntax issue"}),(0,t.jsx)(n.td,{children:"Check syntax"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Use a YAML validator for complex configurations"}),"\n",(0,t.jsx)(n.li,{children:"Break down complex Jinja logic into smaller macros"}),"\n",(0,t.jsx)(n.li,{children:"Maintain consistent indentation"}),"\n",(0,t.jsx)(n.li,{children:"Document custom macros clearly"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"model-attribute-debugging",children:"Model Attribute Debugging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jinja",children:"{# Debug specific model #}\n{% macro output_model_info(model_name) %}\n    {% for model in graph.nodes.values() %}\n        {% if model.name == model_name %}\n            {# Print all available keys to see what we can access #}\n            {{ print('=' * 50) }}\n            {{ print('AVAILABLE MODEL PROPERTIES:') }}\n            {{ print('-' * 30) }}\n            {% for key in model.keys() %}\n                {{ print('- ' ~ key) }}\n            {% endfor %}\n\n            {{ print('=' * 50) }}\n            {{ print('MODEL: ' ~ model.name) }}\n            {{ print('FILE PATH: ' ~ model.original_file_path) }}\n            {{ print('Relation: ' ~ model.relation_name) }}\n\n            {{ print('=' * 50) }}\n\n            {{ print('BASIC INFORMATION:') }}\n            {{ print('-' * 30) }}\n            {{ print('Package: ' ~ model.package_name) }}\n            {{ print('Path: ' ~ model.path) }}\n            {{ print('Original File Path: ' ~ model.original_file_path) }}\n            {{ print('Resource Type: ' ~ model.resource_type) }}\n            {{ print('Unique ID: ' ~ model.unique_id) }}\n\n            {{ print('\\nCONFIGURATION:') }}\n            {{ print('-' * 30) }}\n            {{ print('Materialization: ' ~ model.config.materialized) }}\n            {{ print('Depends On:') }}\n            {% for depend in model.depends_on.nodes %}\n                {{ print('  - ' ~ depend) }}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n{%- endmacro %}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can run this from the terminal as follows."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dbt run-operation output_model_info --args '{model_name: us_population}'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"If errors persist:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Review the dbt documentation for proper syntax"}),"\n",(0,t.jsx)(n.li,{children:"Use a YAML linter for configuration files"}),"\n",(0,t.jsx)(n.li,{children:"Break down complex templates into smaller parts"}),"\n",(0,t.jsx)(n.li,{children:"Consider using dbt package templates as examples"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);