"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9934],{28453:(e,r,o)=>{o.d(r,{R:()=>a,x:()=>i});var n=o(96540);const t={},s=n.createContext(t);function a(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:r},e.children)}},42878:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"how-tos/airflow/request-resources-on-workers","title":"Worker - Request Memory and CPU","description":"Sometimes you need to run tasks that require more memory or compute power. Airflow task\'s definition that use a kubernetes execution environment allow for this type of configuration.","source":"@site/docs/how-tos/airflow/request-resources-on-workers.md","sourceDirName":"how-tos/airflow","slug":"/how-tos/airflow/request-resources-on-workers","permalink":"/docusaurus-test/docs/how-tos/airflow/request-resources-on-workers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-tos/airflow/request-resources-on-workers.md","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"title":"Worker - Request Memory and CPU","sidebar_position":40},"sidebar":"tutorialSidebar","previous":{"title":"Worker - Custom Worker Environment","permalink":"/docusaurus-test/docs/how-tos/airflow/customize-worker-environment"},"next":{"title":"Datacoves","permalink":"/docusaurus-test/docs/how-tos/datacoves/"}}');var t=o(74848),s=o(28453);const a={title:"Worker - Request Memory and CPU",sidebar_position:40},i="How to request more memory or cpu resources on a particular DAG task",c={},u=[{value:"Example DAG",id:"example-dag",level:2},{value:"YAML version",id:"yaml-version",level:3}];function l(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"how-to-request-more-memory-or-cpu-resources-on-a-particular-dag-task",children:"How to request more memory or cpu resources on a particular DAG task"})}),"\n",(0,t.jsx)(r.p,{children:"Sometimes you need to run tasks that require more memory or compute power. Airflow task's definition that use a kubernetes execution environment allow for this type of configuration."}),"\n",(0,t.jsxs)(r.p,{children:["Similarly to how you ",(0,t.jsx)(r.a,{href:"/docusaurus-test/docs/how-tos/airflow/customize-worker-environment",children:"overrode a worker's running environment"}),", you need to specify the ",(0,t.jsx)(r.code,{children:"resources"})," argument on the container spec."]}),"\n",(0,t.jsx)(r.h2,{id:"example-dag",children:"Example DAG"}),"\n",(0,t.jsxs)(r.p,{children:["In the following example, we're requesting a minimum of 8Gb of memory and 1000m of cpu in the ",(0,t.jsx)(r.code,{children:"requests"})," dict to run the task. ",(0,t.jsx)(r.a,{href:"https://pwittrock.github.io/docs/tasks/configure-pod-container/assign-cpu-ram-container/",children:"Click here"})," to learn more about resources requests and limits on a kubernetes running environment."]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"[!NOTE] Keep in mind that if you request more resources than a node in the cluster could allocate the task will never run and the DAG will fail."}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'from datetime import datetime\nfrom airflow.decorators import dag, task\nfrom kubernetes.client import models as k8s\n\n# Configuration for Kubernetes Pod Override with Resource Requests\nTRANSFORM_CONFIG = {\n    "pod_override": k8s.V1Pod(\n        spec=k8s.V1PodSpec(\n            containers=[\n                k8s.V1Container(\n                    name="transform",\n                    resources=k8s.V1ResourceRequirements(\n                        requests={"memory": "8Gi", "cpu": "1000m"}\n                    ),\n                )\n            ]\n        )\n    ),\n}\n\n@dag(\n    default_args={\n        "start_date": datetime(2022, 10, 10),\n        "owner": "Noel Gomez",\n        "email": "gomezn@example.com",\n        "email_on_failure": True,\n    },\n    description="Sample DAG with custom resources",\n    schedule="0 0 1 */12 *",\n    tags=["version_2"],\n    catchup=False,\n)\ndef request_resources_dag():\n\n    @task.datacoves_bash(executor_config=TRANSFORM_CONFIG)\n    def transform():\n        return "echo \'Resource request DAG executed successfully!\'"\n\n    transform()\n\nrequest_resources_dag()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"yaml-version",children:"YAML version"}),"\n",(0,t.jsx)(r.p,{children:"In the yml DAG you can configure the memory and cpu resources."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'description: "Sample DAG with custom resources"\nschedule_interval: "0 0 1 */12 *"\ntags:\n  - version_2\ndefault_args:\n  start_date: 2022-10-10\n  owner: Noel Gomez\n  email: gomezn@example.com\n  email_on_failure: true\ncatchup: false\n\n# DAG Tasks\nnodes:\n  transform:\n    operator: operators.datacoves.bash.DatacovesBashOperator\n    type: task\n    config:\n      resources:\n        memory: 8Gi\n        cpu: 1000m\n'})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);