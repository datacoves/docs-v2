"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6802],{6042:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"how-tos/airflow/generate-dags-from-yml","title":"DAGs - Generate DAGs from yml","description":"You have the option to write out your DAGs in python or you can write them using yml and then have dbt-coves generate the python DAG for you.","source":"@site/docs/how-tos/airflow/generate-dags-from-yml.md","sourceDirName":"how-tos/airflow","slug":"/how-tos/airflow/generate-dags-from-yml","permalink":"/docusaurus-test/docs/how-tos/airflow/generate-dags-from-yml","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-tos/airflow/generate-dags-from-yml.md","tags":[],"version":"current","sidebarPosition":23,"frontMatter":{"title":"DAGs - Generate DAGs from yml","sidebar_position":23},"sidebar":"tutorialSidebar","previous":{"title":"DAGs - Dynamically Set Schedule","permalink":"/docusaurus-test/docs/how-tos/airflow/dynamically-set-schedule"},"next":{"title":"DAGs - Get Current Git Branch Name from a DAG Task","permalink":"/docusaurus-test/docs/how-tos/airflow/get-current-branch-name"}}');var r=o(74848),s=o(28453);const a={title:"DAGs - Generate DAGs from yml",sidebar_position:23},i="Generate DAGs from yml",l={},d=[{value:"Configure config.yml",id:"configure-configyml",level:2},{value:"Create the yml file for your Airflow DAG",id:"create-the-yml-file-for-your-airflow-dag",level:2},{value:"How to create your own task group with YAML",id:"how-to-create-your-own-task-group-with-yaml",level:3},{value:"Field Reference:",id:"field-reference",level:4},{value:"Generate your python file from your yml file",id:"generate-your-python-file-from-your-yml-file",level:2},{value:"Generate all your python files",id:"generate-all-your-python-files",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"generate-dags-from-yml",children:"Generate DAGs from yml"})}),"\n",(0,r.jsx)(n.p,{children:"You have the option to write out your DAGs in python or you can write them using yml and then have dbt-coves generate the python DAG for you."}),"\n",(0,r.jsx)(n.h2,{id:"configure-configyml",children:"Configure config.yml"}),"\n",(0,r.jsxs)(n.p,{children:["This configuration is for the ",(0,r.jsx)(n.code,{children:"dbt-coves generate airflow-dags"})," command which generates the DAGs from your yml files. Visit the ",(0,r.jsx)(n.a,{href:"https://github.com/datacoves/dbt-coves?tab=readme-ov-file#settings",children:"dbt-coves docs"})," for the full dbt-coves configuration settings."]}),"\n",(0,r.jsxs)(n.p,{children:["dbt-coves will read settings from ",(0,r.jsx)(n.code,{children:"<dbt_project_path>/.dbt_coves/config.yml"}),". We must create these files in order for dbt-coves to function."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 1:"})," Create the ",(0,r.jsx)(n.code,{children:".dbt-coves"})," folder at the root of your dbt project (where the dbt_project.yml file is located). Then create a file called ",(0,r.jsx)(n.code,{children:"config.yml"})," inside of ",(0,r.jsx)(n.code,{children:".dbt-coves"}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["Datacoves' recommended dbt project location is ",(0,r.jsx)(n.code,{children:"transform/"})," eg) ",(0,r.jsx)(n.code,{children:"transform/.dbt-coves/config.yml"}),". This will require some minor refactoring and ensuring that the  ",(0,r.jsx)(n.code,{children:"dbt project path "})," in your environment settings reflects accordingly."]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 2:"})," We use environment variables such as ",(0,r.jsx)(n.code,{children:"DATACOVES__AIRFLOW_DAGS_YML_PATH"})," that are pre-configured for you. For more information on these variables see ",(0,r.jsx)(n.a,{href:"/docusaurus-test/docs/reference/vscode/datacoves-env-vars",children:"Datacoves Environment Variables"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yml_path"}),": This is where dbt-coves will look for the yml files to generate your Python DAGs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dags_path"}),": This is where dbt-coves will place your generated python DAGs."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Place the following in your ",(0,r.jsx)(n.code,{children:"config.yml file"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"generate:\n...\n    airflow_dags:\n    # source location for yml files\n    yml_path: \"/config/workspace/{{ env_var('DATACOVES__AIRFLOW_DAGS_YML_PATH') }}\"\n    \n    # destination for generated python dags\n    dags_path: \"/config/workspace/{{ env_var('DATACOVES__AIRFLOW_DAGS_PATH') }}\"\n...\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["If using an Extract and Load tool in your DAG you can dynamically generate your sources; however, additional configuration will be needed inside the config.yml file. See ",(0,r.jsx)(n.a,{href:"/docusaurus-test/docs/how-tos/airflow/run-airbyte-sync-jobs#configure-transformdbt-covesconfigyml-file",children:"Airbyte"}),". For ",(0,r.jsx)(n.a,{href:"/docusaurus-test/docs/how-tos/airflow/run-fivetran-sync-jobs#configure-transformdbt-covesconfigyml-file",children:"Fivetran"})," contact us to complete the setup."]})]}),"\n",(0,r.jsx)(n.h2,{id:"create-the-yml-file-for-your-airflow-dag",children:"Create the yml file for your Airflow DAG"}),"\n",(0,r.jsxs)(n.p,{children:["dbt-coves will look for your yml inside your ",(0,r.jsx)(n.code,{children:"orchestrate/dags_yml_definition"})," folder to generate your Python DAGs. Please create these folders if you have not already done so."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["When you create a DAG with YAML the name of the file will be the name of the DAG.\neg) ",(0,r.jsx)(n.code,{children:"yml_dbt_dag.yml"})," generates a dag named ",(0,r.jsx)(n.code,{children:"yml_dbt_dag"})]})}),"\n",(0,r.jsx)(n.p,{children:"Let's create our first DAG using YAML."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 1"}),": Create a new file named ",(0,r.jsx)(n.code,{children:"my_first_yml.yml"})," in your ",(0,r.jsx)(n.code,{children:"orchestrate/dags_yml_definition"})," folder."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 2:"})," Add the following YAML to your file and be sure to change"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'description: "Sample DAG for dbt build"\nschedule: "0 0 1 */12 *"\ntags:\n  - version_2\ndefault_args:\n  start_date: 2022-10-10\n  owner: Noel Gomez # Replace this with your name\n  email: gomezn@example.com # Replace with the email of the recipient for failures\n  email_on_failure: true\ncatchup: false\n\nnodes:\n  run_dbt:\n    type: task\n    operator: operators.datacoves.dbt.DatacovesDbtOperator\n    bash_command: "dbt run -s personal_loans" \n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["In the examples we make use of the Datacoves Operators which handle things like copying and running dbt deps. For more information on what these operators handle, see ",(0,r.jsx)(n.a,{href:"/docusaurus-test/docs/reference/airflow/datacoves-operator",children:"Datacoves Operators"})]})}),"\n",(0,r.jsx)(n.h3,{id:"how-to-create-your-own-task-group-with-yaml",children:"How to create your own task group with YAML"}),"\n",(0,r.jsx)(n.p,{children:"The example below shows how to create your own task group with YAML."}),"\n",(0,r.jsx)(n.h4,{id:"field-reference",children:"Field Reference:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"type"}),": This must be ",(0,r.jsx)(n.code,{children:"task_group"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tooltip"}),": Hover message for the task group."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tasks"}),": Here is where you will define the individual tasks in the task group."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:'Specify the "task group" and "task" names at the beginning of their respective sections, as illustrated below:'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'nodes:\n  extract_and_load_dlt: # The name of the task group\n    type: task_group\n    tooltip: "dlt Extract and Load"\n\n    tasks:\n      load_us_population: # The name of the task \n        operator: operators.datacoves.bash.DatacovesBashOperator\n        # activate_venv: true\n        # Virtual Environment is automatically activated\n\n        cwd: "load/dlt/csv_to_snowflake/"\n        bash_command: "python load_csv_data.py"\n\n      # Add more tasks here  \n      task_2:\n        ...  \n'})}),"\n",(0,r.jsx)(n.h2,{id:"generate-your-python-file-from-your-yml-file",children:"Generate your python file from your yml file"}),"\n",(0,r.jsx)(n.p,{children:"To generate your DAG, be sure you have the yml you wish to generate a DAG from open."}),"\n",(0,r.jsxs)(n.p,{children:["Select ",(0,r.jsx)(n.code,{children:"more"})," in the bottom bar."]}),"\n",(0,r.jsxs)(n.p,{children:["Select ",(0,r.jsx)(n.code,{children:"Generate Airflow Dag for YML"}),". This will run the command to generate the individual yml."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Generate Airflow Dag",src:o(87119).A+"",width:"1438",height:"678"})}),"\n",(0,r.jsx)(n.h2,{id:"generate-all-your-python-files",children:"Generate all your python files"}),"\n",(0,r.jsxs)(n.p,{children:["To generate all of the DAGs from your ",(0,r.jsx)(n.code,{children:"orchestrate/dag_yml_definitions/"})," directory"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Run ",(0,r.jsx)(n.code,{children:"dbt-coves generate airflow-dags"})," in your terminal."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["All generated python DAGs will be placed in the ",(0,r.jsx)(n.code,{children:"orchestrate/dags"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pendulum import datetime\n\nfrom airflow.decorators import dag\nfrom operators.datacoves.dbt import DatacovesDbtOperator\n\n@dag(\n    default_args={\n        "start_date": datetime(2022, 10, 10),\n        "owner": "Noel Gomez",\n        "email": "gomezn@example.com",\n        "email_on_failure": True,\n    },\n    description="Sample DAG for dbt build",\n    schedule="0 0 1 */12 *",\n    tags=["version_2"],\n    catchup=False,\n)\ndef yml_dbt_dag():\n    run_dbt = DatacovesDbtOperator(\n        task_id="run_dbt", bash_command="dbt run -s personal_loans"\n    )\n\ndag = yml_dbt_dag()\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},87119:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/generate_airflow_dag-f5763cb199f5805067cc15f94d98519d.gif"}}]);