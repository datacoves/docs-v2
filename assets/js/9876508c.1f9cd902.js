"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7099],{18165:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/variable_creation-47ccb9e25be457fd89377c2de294790f.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(96540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},42437:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/connection_creation-10385c38bc792fdeec5ebf967bd54c96.png"},58474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"how-tos/airflow/use-variables-and-connections","title":"DAGs - Using Variables and Connections","description":"dbt-coves generate airflow-dags does not support reading variables/connections, but you may generate the initial Python Airflow DAG and add the connection / variable information.","source":"@site/docs/how-tos/airflow/use-variables-and-connections.md","sourceDirName":"how-tos/airflow","slug":"/how-tos/airflow/use-variables-and-connections","permalink":"/docusaurus-test/docs/how-tos/airflow/use-variables-and-connections","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":33,"frontMatter":{"title":"DAGs - Using Variables and Connections","sidebar_position":33},"sidebar":"tutorialSidebar","previous":{"title":"DAGs - Test DAGs","permalink":"/docusaurus-test/docs/how-tos/airflow/test-dags"},"next":{"title":"Notifications - Send Emails","permalink":"/docusaurus-test/docs/how-tos/airflow/send-emails"}}');var s=t(74848),i=t(28453);const o={title:"DAGs - Using Variables and Connections",sidebar_position:33},r="Variables and Connections",c={},d=[{value:"Usage",id:"usage",level:2},{value:"Variables",id:"variables",level:3},{value:"Connections",id:"connections",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"variables-and-connections",children:"Variables and Connections"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"dbt-coves generate airflow-dags does not support reading variables/connections, but you may generate the initial Python Airflow DAG and add the connection / variable information."})}),"\n",(0,s.jsxs)(n.p,{children:["The best way to store and retrieve information within Airflow is to use ",(0,s.jsx)(n.code,{children:"Variables"})," and ",(0,s.jsx)(n.code,{children:"Connections"}),", both available on the ",(0,s.jsx)(n.code,{children:"Admin"})," upper dropdown."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"select More",src:t(76559).A+"",width:"918",height:"460"})}),"\n",(0,s.jsxs)(n.p,{children:["The main difference between them is that ",(0,s.jsx)(n.a,{href:"https://airflow.apache.org/docs/apache-airflow/2.3.1/howto/variable.html",children:"Variables"})," is a generic multi-purpose store, while ",(0,s.jsx)(n.a,{href:"https://airflow.apache.org/docs/apache-airflow/2.3.1/howto/connection.html",children:"Connections"})," are aimed at third-party providers."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Rather than using connections or variables stored in Airflow\u2019s database, we recommend using a Secrets Manager. These secrets are encrypted and can be stored either in ",(0,s.jsx)(n.a,{href:"/docusaurus-test/docs/how-tos/airflow/use-datacoves-secrets-manager",children:"Datacoves Secrets manager"})," or a third-party secrets manager like ",(0,s.jsx)(n.a,{href:"/docusaurus-test/docs/how-tos/airflow/use-aws-secrets-manager",children:"AWS Secrets Manager"})]})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,s.jsxs)(n.p,{children:["After creating a variable in Airflow's UI, using it is as simple as importing the ",(0,s.jsx)(n.code,{children:"Variable"})," model in your DAG and ",(0,s.jsx)(n.code,{children:"getting"})," it's name. If a variable contains ",(0,s.jsx)(n.code,{children:"SECRET"})," on it's name, value will be hidden:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"select More",src:t(18165).A+"",width:"628",height:"495"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from pendulum import datetime\nfrom airflow.decorators import dag, task\nfrom airflow.models import Variable\n\n@dag(\n    default_args={"start_date": datetime(2024, 1, 1)},\n    description="DAG that outputs a Variable",\n    schedule="0 0 1 */12 *",\n    tags=["version_1"],\n    catchup=False,\n)\ndef variables_dag():\n\n    @task.datacoves_bash(="main")\n    def transform():\n        daily_run_tag = Variable.get("DBT_DAILY_RUN_TAG") \n        return f"dbt build -s \'tag:{daily_run_tag}\'"\n\n    transform()\n\nvariables_dag()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"connections",children:"Connections"}),"\n",(0,s.jsx)(n.p,{children:"Consuming connections data is also straightforward, though you need to take it's attributes into consideration, as they'll vary depending on the provider."}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, a connection of ",(0,s.jsx)(n.code,{children:"type Airbyte"})," is created, and it's ",(0,s.jsx)(n.code,{children:"host"})," is echoed in a DAG."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"select More",src:t(42437).A+"",width:"973",height:"439"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from pendulum import datetime\n\nfrom airflow.decorators import dag, task\nfrom airflow.models import Connection\n\n@dag(\n    default_args={"start_date": datetime(2024, 1, 1)},\n    description="DAG that outputs Airbyte Hostname",\n    schedule="0 0 1 */12 *",\n    tags=["version_1"],\n    catchup=False,\n)\ndef connections_dag():\n    \n    @task.datacoves_bash()\n    def echo_airbyte_host():\n        airbyte_connection = Connection.get_connection_from_secrets(conn_id="AIRBYTE_CONNECTION") \n        return f"echo \'Airbyte hostname is {airbyte_connection.host}\'"\n\n    echo_airbyte_host()\n\nconnections_dag()\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},76559:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/variables_connections_ui-a4382863033545c267978bd697c19be2.png"}}]);