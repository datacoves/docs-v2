"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2240],{17348:(e,n,a)=>{a.d(n,{A:()=>o});const o=a.p+"assets/images/service_connections_main-7fcc4862dd9835e19c61be2b0a498f3d.png"},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var o=a(96540);const s={},t=o.createContext(s);function i(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(t.Provider,{value:n},e.children)}},48019:(e,n,a)=>{a.d(n,{A:()=>o});const o=a.p+"assets/images/service_connection_airflow_raw-93acd41a3c1baa456174cec2a9752e58.png"},56439:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"how-tos/airflow/sync-database","title":"Airflow - Sync Internal Airflow database","description":"It is now possible to synchronize the Datacoves Airflow database to your Data Warehouse","source":"@site/docs/how-tos/airflow/sync-database.mdx","sourceDirName":"how-tos/airflow","slug":"/how-tos/airflow/sync-database","permalink":"/docusaurus-test/docs/how-tos/airflow/sync-database","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Airflow - Sync Internal Airflow database","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Airflow - Accessing the Airflow API","permalink":"/docusaurus-test/docs/how-tos/airflow/use-airflow-api"},"next":{"title":"Airflow - Trigger a DAG using Datasets","permalink":"/docusaurus-test/docs/how-tos/airflow/api-triggered-dag"}}');var s=a(74848),t=a(28453);const i={title:"Airflow - Sync Internal Airflow database",sidebar_position:3},r="Sync Airflow database",l={},d=[{value:"Data Sync Decorator",id:"data-sync-decorator",level:2},{value:"Example DAG",id:"example-dag",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sync-airflow-database",children:"Sync Airflow database"})}),"\n",(0,s.jsx)(n.p,{children:"It is now possible to synchronize the Datacoves Airflow database to your Data Warehouse"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This is currently only available for Snowflake and Redshift warehouses."})}),"\n",(0,s.jsx)(n.h2,{id:"data-sync-decorator",children:"Data Sync Decorator"}),"\n",(0,s.jsx)(n.p,{children:"To synchronize the Airflow database, we can use an Airflow DAG with the Datacoves Airflow Decorator below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@task.datacoves_airflow_db_sync\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["To avoid synchronizing unnecessary Airflow tables, the following Airflow tables are synced by default: ",(0,s.jsx)(n.code,{children:"ab_permission"}),", ",(0,s.jsx)(n.code,{children:"ab_role"}),", ",(0,s.jsx)(n.code,{children:"ab_user"}),", ",(0,s.jsx)(n.code,{children:"dag"}),", ",(0,s.jsx)(n.code,{children:"dag_run"}),", ",(0,s.jsx)(n.code,{children:"dag_tag"}),", ",(0,s.jsx)(n.code,{children:"import_error"}),", ",(0,s.jsx)(n.code,{children:"job"}),", ",(0,s.jsx)(n.code,{children:"task_fail"}),", ",(0,s.jsx)(n.code,{children:"task_instance"})]})}),"\n",(0,s.jsx)(n.p,{children:"These decorator can receive:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"db_type"}),': the destination warehouse type, "snowflake" or "redshift"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"connection_id"}),": the name of the Airflow Service Connection in Datacoves that will be used by the operator."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tables"}),": a list of tables to override the default ones. ",(0,s.jsx)(n.em,{children:"Warning:"})," An empty list ",(0,s.jsx)(n.code,{children:"[]"})," will perform a full-database sync."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"additional_tables"}),": a list of additional tables you would want to add to the default set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"destination_schema"}),": the destination schema where the Airflow tables will end-up. By default, the schema will be named as follows: ",(0,s.jsx)(n.code,{children:"airflow-\\{datacoves environment slug\\}"})," for example ",(0,s.jsx)(n.code,{children:"airflow-qwe123"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"airflow_load",src:a(48019).A+"",width:"2258",height:"1074"})}),"\n",(0,s.jsx)(n.h2,{id:"example-dag",children:"Example DAG"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from pendulum import datetime\n\nfrom airflow.decorators import dag, task\n\n@dag(\n    default_args={\n        "start_date": datetime(2022, 10, 10),\n        "owner": "Bruno",\n        "email": "bruno@example.com",\n        "email_on_failure": False,\n        "retries": 3\n    },\n    description="Sample DAG for dbt build",\n    schedule="0 0 1 */12 *",\n    tags=["extract_and_load"],\n    catchup=False,\n)\ndef airflow_data_sync():\n    @task.datacoves_airflow_db_sync(\n        db_type="snowflake",\n        destination_schema="airflow_dev",\n        connection_id="main",\n        # additional_tables=["additional_table_1", "additional_table_2"],\n    )\n    def sync_airflow_db():\n        pass\n\n    sync_airflow_db()\n\nairflow_data_sync()\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The example DAG above uses the service connection ",(0,s.jsx)(n.code,{children:"main"})]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Service Connection main",src:a(17348).A+"",width:"2538",height:"1248"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);