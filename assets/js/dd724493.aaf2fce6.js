"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1316],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},69369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"how-tos/airflow/retry-dbt-tasks","title":"DAGs - Retry dbt jobs","description":"Overview","source":"@site/docs/how-tos/airflow/retry-dbt-tasks.md","sourceDirName":"how-tos/airflow","slug":"/how-tos/airflow/retry-dbt-tasks","permalink":"/docusaurus-test/docs/how-tos/airflow/retry-dbt-tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-tos/airflow/retry-dbt-tasks.md","tags":[],"version":"current","sidebarPosition":29,"frontMatter":{"title":"DAGs - Retry dbt jobs","sidebar_position":29},"sidebar":"tutorialSidebar","previous":{"title":"DAGs - Run dbt","permalink":"/docusaurus-test/docs/how-tos/airflow/run-dbt"},"next":{"title":"DAGs - Run Databricks Notebooks","permalink":"/docusaurus-test/docs/how-tos/airflow/run-databricks-notebook"}}');var s=n(74848),i=n(28453);const o={title:"DAGs - Retry dbt jobs",sidebar_position:29},d="Retry a dbt task",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"How dbt Retries Work",id:"how-dbt-retries-work",level:2},{value:"Implementing dbt Retries",id:"implementing-dbt-retries",level:2},{value:"Step 1: Configure the <code>datacoves_dbt</code> Decorator",id:"step-1-configure-the-datacoves_dbt-decorator",level:3},{value:"Step 2: Add Conditional Logic for Retry",id:"step-2-add-conditional-logic-for-retry",level:3},{value:"Step 3: Call the Task with Expected Files Parameter",id:"step-3-call-the-task-with-expected-files-parameter",level:3},{value:"Complete Example",id:"complete-example",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"retry-a-dbt-task",children:"Retry a dbt task"})}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(t.p,{children:["Retrying failed dbt models is a common workflow requirement when working with data transformations. This guide explains how to implement dbt task retry functionality in Airflow using Datacoves' custom ",(0,s.jsx)(t.code,{children:"datacoves_dbt"})," decorator."]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Datacoves version 3.4 or later"}),"\n",(0,s.jsx)(t.li,{children:"dbt API feature enabled in your environment (contact support for further assistance)"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"how-dbt-retries-work",children:"How dbt Retries Work"}),"\n",(0,s.jsx)(t.p,{children:"The retry mechanism works by:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Capturing results"})," of a dbt run including any failures"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Storing these results"})," using the dbt API"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Retrieving the previous run state"})," when a retry is initiated"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Selectively running"})," only the failed models and their downstream dependencies"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"implementing-dbt-retries",children:"Implementing dbt Retries"}),"\n",(0,s.jsxs)(t.h3,{id:"step-1-configure-the-datacoves_dbt-decorator",children:["Step 1: Configure the ",(0,s.jsx)(t.code,{children:"datacoves_dbt"})," Decorator"]}),"\n",(0,s.jsx)(t.p,{children:"When defining your task, enable the necessary parameters for retries:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@task.datacoves_dbt(\n    connection_id="your_connection",\n    dbt_api_enabled=True,        # Enable dbt API functionality\n    download_run_results=True,   # Allow downloading previous run results\n)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-2-add-conditional-logic-for-retry",children:"Step 2: Add Conditional Logic for Retry"}),"\n",(0,s.jsx)(t.p,{children:"Implement logic in your task function to check for existing results and execute the appropriate dbt command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@task.datacoves_dbt(\n    connection_id="your_connection",\n    dbt_api_enabled=True,\n    download_run_results=True,\n)\ndef dbt_build(expected_files: list = []):\n    if expected_files:\n        return "dbt build -s result:error+ --state logs"\n    else:\n        return "dbt build -s your_models+"\n'})}),"\n",(0,s.jsx)(t.h3,{id:"step-3-call-the-task-with-expected-files-parameter",children:"Step 3: Call the Task with Expected Files Parameter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'dbt_build(expected_files=["run_results.json"])\n'})}),"\n",(0,s.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,s.jsx)(t.p,{children:"Here's a complete DAG implementation:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'"""\n## Retry dbt Example\nThis DAG demonstrates how to retry a DAG that fails during a run\n"""\n\nfrom airflow.decorators import dag, task\nfrom orchestrate.utils import datacoves_utils\n\n\n@dag(\n    doc_md = __doc__,\n    catchup = False,\n    default_args=datacoves_utils.set_default_args(\n        owner = "Your Name",\n        owner_email = "your.email@example.com"\n    ),\n    schedule = datacoves_utils.set_schedule("0 0 1 */12 *"),\n    description="Sample DAG demonstrating how to run the dbt models that fail",\n    tags=["dbt_retry"],\n)\ndef retry_dbt_failures():\n    @task.datacoves_dbt(\n        connection_id="your_connection",\n        dbt_api_enabled=True,\n        download_run_results=True,\n    )\n    def dbt_build(expected_files: list = []):\n        if expected_files:\n            return "dbt build -s result:error+ --state logs"\n        else:\n            return "dbt build -s model_a+ model_b+"\n\n    dbt_build(expected_files=["run_results.json"])\n\nretry_dbt_failures()\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);